[build-system]
requires = ["setuptools>=77", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "py_crypto_hd_wallet"
dynamic = ["version", "dependencies", "optional-dependencies"]
authors = [
    {name = "Emanuele Bellocchia", email = "ebellocchia@gmail.com"}
]
maintainers = [
    {name = "Emanuele Bellocchia", email = "ebellocchia@gmail.com"}
]
description = "HD (Hierarchical Deterministic) wallet for cryptocurrencies based on bip_utils library"
readme = "README.md"
license = "MIT"
license-files = [
    "LICENSE",
]
requires-python = ">=3.7"
keywords = [
    "python",
    "cryptography",
    "ecdsa",
    "ed25519",
    "ed25519-blake2b",
    "nist256p1",
    "secp256k1",
    "sr25519",
    "wallet",
    "hd-wallet",
    "slip10",
    "slip0010",
    "bip39",
    "bip39-substrate",
    "bip32",
    "bip44",
    "bip49",
    "bip84",
    "bech32",
    "bech32m",
    "segwit",
    "electrum",
    "substrate",
    "taproot",
    "daedalus",
    "byron",
    "shelley",
    "akash",
    "algorand",
    "atom",
    "avalanche",
    "avax",
    "band protocol",
    "binance chain",
    "binance smart chain",
    "bitcoin",
    "bitcoin cash",
    "bitcoinsv",
    "bnb",
    "cardano",
    "cardano-byron",
    "cardano-shelley",
    "celo",
    "certik",
    "cosmos",
    "dash",
    "digibyte",
    "dogecoin",
    "ecash",
    "elrond",
    "eos",
    "ethereum",
    "ethereum classic",
    "fantom opera",
    "filecoin",
    "harmony one",
    "huobi chain",
    "iris",
    "irisnet",
    "kava",
    "litecoin",
    "matic",
    "mavryk",
    "monero",
    "okex chain",
    "ontology",
    "osmosis",
    "nano",
    "near",
    "near protocol",
    "neo",
    "polygon",
    "ripple",
    "secret",
    "solana",
    "stellar",
    "substrate",
    "terra",
    "tezos",
    "theta",
    "tron",
    "vechain",
    "verge",
    "zcash",
    "zilliqa",
    "acala",
    "bifrost",
    "chainx",
    "edgeware",
    "karura",
    "kusama",
    "moonbeam",
    "moonriver",
    "phala",
    "plasm",
    "sora",
    "stafi",
    "polkadot",
]
classifiers = [
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 5 - Production/Stable",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
]

[project.urls]
Homepage = "https://github.com/ebellocchia/py_crypto_hd_wallet"
Download = "https://github.com/ebellocchia/py_crypto_hd_wallet/archive/v{version}.tar.gz"

[tool.setuptools]
packages = {find = {exclude = ["docs*", "readme*", "tests*"]}}

[tool.setuptools.dynamic]
version = {attr = "py_crypto_hd_wallet._version.__version__"}
dependencies = {file = ["requirements.txt"]}
optional-dependencies.develop = {file = ["requirements-dev.txt"]}

#
# Tools configuration
#

[tool.ruff]
target-version = "py37"
line-length = 120
exclude = [
    ".github",
    ".eggs",
    ".egg-info",
    ".idea",
    ".mypy_cache",
    ".tox",
    "build",
    "dist",
    "docs",
    "readme",
    "tests",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # pyflakes
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "C90",    # mccabe complexity
    "PL",     # pylint
]
ignore = [
    "N802",     # Function name should be lowercase
    "E231",     # Missing whitespace after ':'
    "F821",     # Undefined name (Literal import for Python 3.7 compatibility)
    "UP006",    # Use `type` instead of `Type` for type annotation (Python <3.9 compatibility)
    "UP007",    # Use `X | Y` for type annotations (Python <3.10 compatibility)
    "UP037",    # Remove quotes from type annotation (Literal import for Python 3.7 compatibility)
    "UP045",    #  Use `X | None` for type annotations (Python <3.10 compatibility)
    # pydocstyle
    "D104",     # Missing docstring in public package
    "D202",     # No blank lines allowed after function docstring
    "D203",     # 1 blank line required before class docstring
    "D205",     # 1 blank line required between summary line and description
    "D212",     # Multi-line docstring summary should start at the first line
    "D406",     # Section name should end with a newline
    "D407",     # Missing dashed underline after section
    "D413",     # Missing blank line after last section
    "D415",     # First line should end with a period, question mark, or exclamation point
    "D417",     # Missing argument description in the docstring: **kwargs
    # pylint
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]        # Imported but unused, missing docstring

[tool.ruff.lint.isort]
known-first-party = []
lines-after-imports = 2
combine-as-imports = false
force-single-line = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.7"
ignore_missing_imports = true
follow_imports = "skip"
exclude = [
    "\\.github",
    "\\.eggs",
    "\\.egg-info",
    "\\.idea",
    "\\.ruff_cache",
    "\\.tox",
    "build",
    "dist",
    "docs",
    "readme",
    "tests",
    "venv",
]

[tool.coverage.run]
omit = [
    ".tox/*",
    "tests/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstract",
    "@overload",
]
